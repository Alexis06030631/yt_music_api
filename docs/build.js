const { copySync, readdir, createReadStream, writeFile } = require("fs-extra");
const { createInterface } = require("readline");
const { join, parse } = require("path");
const { exec} = require("child_process");
const {readFileSync} = require("fs");

// This script is not part of faast.js, but rather a tool to rewrite some parts
// of the generated docs from api-generator and api-documenter so they work with
// the website generated by docusaurus.

async function main() {
	await new Promise((resolve, reject) =>
		exec(
			"api-extractor run --local --verbose && api-documenter markdown --input-folder=./temp/ --output-folder=./docs/src",
			(err, stdout, stderr) => {
				console.log(stdout);
				console.error(stderr);
				if (err) {
					reject(err);
				} else {
					resolve();
				}
			}
		)
	);

	const dir = "./docs/src";
	const defaultDir = "./docs/default";
	const docFiles = await readdir(dir);
	const Methods = [];
	const Classes = [];
	const Types = [];
	const module_name = require('../package.json').name

	// Copy content folder defaultDir to dir without use foreach
	copySync(defaultDir, dir, { overwrite: true });

	for (const docFile of docFiles) {
		try {
			const { name: id, ext } = parse(docFile);
			if (ext !== ".md") continue;

			const docPath = join(dir, docFile);
			let content = readFileSync(docPath, "utf8");
			content = content.replace(/^\[.+\]\(.+\)$/m, "");
			// Replace all ```typescript by ```js
			content = content.replace(/```typescript/g, "```javascript");
			// Remove Modifiers column for every table in .md file
			content = content.replace(/\| Modifier \|/g, "|");

			// Get Details from title
			const details = content.match(/## (?<constructor>.+?)\.(?<name>.+?) (?<type>.+)/)
			if(details){
				const { constructor, name, type } = details.groups
				if(constructor.includes('Manager')){
					const manager = Methods.find(m => m.constructor === constructor)
					if(!manager)Methods.push({constructor, url:`${module_name}.${constructor}.md`})
				}else if(constructor.includes('interfaces')) {
					if(type === 'class') {
						Types.push({name: name.split('.')[1], constructor, url: `${module_name}.${constructor}.${name}.md`})
					}
				}else if(type === 'class'){
					Classes.push({constructor, name, type, url:`${module_name}.${constructor}.${name}.md`})
				}
			}

			await writeFile(docPath, content);
		} catch (err) {
			console.error(`Could not process ${docFile}: ${err}`);
		}
	}
	// Get Methods
	console.log(Types)

	// Create Sidebar file
	const sidebar = '- [Introduction](README)\n' +
		'- **Methods**' +
		Methods.map(m => `\n  - [${m.constructor}](./${m.url})`).join('') +
		'\n- **Classes**' +
		Classes.map(c => `\n  - [${c.name}](./${c.url}.md)`).join('') +
		'\n- **Interfaces**' +
		Types.map(t => `\n  - [${t.name}](./${t.url}.md)`).join('') +
		'\n- **Links**\n' +
		'- [![Github](/assets/img/github.svg)Github](https://github.com/Alexis06030631/ytmusic_api/)\n' +
		'- [![NPM](/assets/img/npm.svg)NPM](https://www.npmjs.com/package/ytmusic_api_unofficial)\n' +
		'- [![Instagram](/assets/img/instagram.svg)@Leko_system](https://instagram.com/leko_system)'

	await writeFile(join(dir, 'sidebar.md'), sidebar)
}

main();